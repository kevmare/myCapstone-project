version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  aws-cli: circleci/aws-cli@3.1.3
  aws-eks: circleci/aws-eks@2.2.0

commands:

  # Install_eksctl:
  #   description: install eksctl latest
  #   steps:
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo --update --no-cache tar gzip
  #     - run:
  #         name: install eksctl latest
  #         command: |
  #           curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz"
  #           tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$(uname -s)_amd64.tar.gz
  #           sudo mv /tmp/eksctl /usr/local/bin

  install-awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
jobs:
  test-build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/app

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate 
            make lint 
  build-docker:
    docker:
      - image: circleci/golang:1.15
      
    working_directory: ~/app
    
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13

      # Build Docker image
    #   - run:
    #       name: Install Docker
    #       command: |
    #         if ! command -v curl &> /dev/null; then
    #         echo "Error: curl is not installed. Please install curl and try again."
    #         exit 1
    #         fi
    #         which curl
    #         curl -fsSL https://get.docker.com -o get-docker.sh
    #         sudo sh get-docker.sh

    # # Start Docker service
    #   - run:
    #       name: Start Docker service
    #       command: |
    #         sudo service docker start
      - run:
          name: Build Docker image
          command: |
            docker build --tag=capstone_project:ver-${CIRCLE_WORKFLOW_ID:0:5} .
            docker image ls

      # Authenticate with Docker Hub
      - run:
          name: Login to Docker Hub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"

      # Push Docker image to Docker Hub
      - run:
          name: Push image to Docker Hub
          command: |
            docker run -d -p 8000:80 --name capstone capstone_project:ver-${CIRCLE_WORKFLOW_ID:0:5}
            docker ps
            dockerpath=$DOCKERHUB_USERNAME/capstone_project:ver-${CIRCLE_WORKFLOW_ID:0:5}
            echo "Docker ID and Image: $dockerpath" 
            docker image tag capstone_project:ver-${CIRCLE_WORKFLOW_ID:0:5} $dockerpath
            docker push $dockerpath
  deploy-network-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      #installing tar - mandatory for creating workspaces in aws-cli image
      - run:
          name: Install dependencies 
          command: yum install -y tar gzip 
      - run:
          name: Create Network Infra
          working_directory: ./cloudformation
          command: |
            aws cloudformation deploy \
              --template-file network.yml \
              --tags project=capstone_project-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name network-capstone-project \
              --no-fail-on-empty-changeset  
      - run:
          name: Extract InfraComponents
          working_directory: ./cloudformation
          command: |
            export VPC=$(aws cloudformation describe-stacks --stack-name network-capstone-project --query "Stacks[0].Outputs[?OutputKey=='VPC'].OutputValue" --output text)
            export PUBLIC_SUBNET_1=$(aws cloudformation describe-stacks --stack-name network-capstone-project --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet1'].OutputValue" --output text)
            export PUBLIC_SUBNET_2=$(aws cloudformation describe-stacks --stack-name network-capstone-project --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet2'].OutputValue" --output text)
            echo "VPC = ${VPC}"
            echo "Public-Subnet-1 = ${PUBLIC_SUBNET_1}"
            echo "Public-Subnet-2 = ${PUBLIC_SUBNET_2}"
  create-eks-cluster: 
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout
      - install-awscli
      #- Install_eksctl
      # - run:
      #     name: check if cluster exist
      #     command: | 
      #       aws eks list-clusters --region us-east-1 --output text > cluster.txt
      #       cat cluster.txt
      #       if grep -q "Capstone-Project-cluster" cluster.txt
      #       then
      #         echo "the cluster already exist"
      #         circleci-agent step halt
      #         exit 0
      #       else
      #         echo "the cluster doesn't exits"
      #       fi
      - run:
          name: Install kubectl
          
          command: |
            export VPC=$(aws cloudformation describe-stacks --stack-name network-capstone-project --query "Stacks[0].Outputs[?OutputKey=='VPC'].OutputValue" --output text)
            export PUBLIC_SUBNET_1=$(aws cloudformation describe-stacks --stack-name network-capstone-project --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet1'].OutputValue" --output text)
            export PUBLIC_SUBNET_2=$(aws cloudformation describe-stacks --stack-name network-capstone-project --query "Stacks[0].Outputs[?OutputKey=='PublicSubnet2'].OutputValue" --output text)
            echo "VPC = ${VPC}"
            echo "Public-Subnet-1 = ${PUBLIC_SUBNET_1}"
            echo "Public-Subnet-2 = ${PUBLIC_SUBNET_2}"
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            # curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
            
      - run:
          name: Create EKS Cluster
          working_directory: ./cloudformation
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/eks-cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroups-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
              
              #kubectl get svc
          no_output_timeout: 15m
      - run:
          name: Create Node Groups
          working_directory: ./cloudformation
          command: |
            echo ${ENVIRONMENT_NAME}
            echo ${AWS_DEFAULT_REGION}
            aws cloudformation deploy \
              --template-file cloudformation/nodegroups.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroups" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroups-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
workflows:
  default:
    jobs:
      - test-build
      - build-docker:
          requires:
            - test-build
      - deploy-network-infrastructure:
          requires: [test-build, build-docker]
          filters:
            branches:
              only: [main]
      - create-eks-cluster:
          requires: [test-build, build-docker, deploy-network-infrastructure]
          filters:
            branches:
              only: [main]